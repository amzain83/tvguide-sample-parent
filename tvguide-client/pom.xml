<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>tvguide-sample-parent</artifactId>
		<groupId>com.acme.gwt</groupId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>tvguide-client</artifactId>
	<packaging>war</packaging>
	<name>TvGuide Client</name>
	<description>
		This project is meant to demonstrate a few features of how GWT, Gin, and Maven get along.
		It isn't a definitive resource, but an example, experimental in places, to try to fine the
		'ideal' way to write GWT code. 

		The server aspects of this use Servlet, bound through Guice to serve up content.
		RequestFactory is the bridge used to get data from the tvguide-server.jar to the client and
		back again. The client fetches that data when it needs to do so from user interactions.

		The client code itself uses the Activity/Place classes to allow navigation around the app,
		and to allow the user to use the browser back/forward buttons to navigate, as well as to
		make bookmarks.
		
		The logic of loading/saving data and handling general interactions with the application
		is broken out into presenters, distinct from the views that actually draw the UI for the
		user. GWT's documentation on MVP outlines two possible ways of providing this abstraction,
		this application picks one of them, and tries to make it clear how to use it.
	</description>
	<properties>
		<gwt.style>OBF</gwt.style>
		<gwt.draftCompile>false</gwt.draftCompile>
		<!--  there is too much genreated code in gwt for pmd to produce an accurate report -->
		<pmd.skip>true</pmd.skip>
	</properties>
	<profiles>
		<profile>
			<!-- Simplified a few of the default GWT compiler settings in an effort to speed up dev builds -->
			<id>dev-build</id>
			<properties>
				<gwt.style>PRETTY</gwt.style>
				<gwt.draftCompile>true</gwt.draftCompile>
				<gwt.compiler.optimizationLevel>0</gwt.compiler.optimizationLevel>
			</properties>
		</profile>
		<profile>
			<!-- Runs the JpaBootstrap script, which sets up a sample database for use in the webapp's output dir -->
			<id>db-init</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2</version>
						<executions>
							<execution>
								<phase>prepare-package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>java</executable>
									<arguments>
										<argument>-classpath</argument>
										<classpath/>
										<argument>com.acme.gwt.server.simple.JpaBootstrap</argument>
									</arguments>
									<workingDirectory>${project.build.directory}/${project.build.finalName}</workingDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<dependencies>
		<!-- Google Web Toolkit -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwt.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.google.web.bindery</groupId>
			<artifactId>requestfactory-apt</artifactId>
			<version>${gwt.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwt.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-dev</artifactId>
			<version>${gwt.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- GWT Dependency Injection -->
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>${guice.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.gwt.inject</groupId>
			<artifactId>gin</artifactId>
			<version>1.5.0</version>
		</dependency>
		
		<!-- Guice Servlet, JPA, and assisted inject modules -->
		<dependency>
			<groupId>org.sonatype.sisu.inject</groupId>
			<artifactId>guice-persist</artifactId>
			<version>2.9.2</version>
		</dependency>
		<dependency>
			<groupId>com.google.inject.extensions</groupId>
			<artifactId>guice-servlet</artifactId>
			<version>${guice.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.inject.extensions</groupId>
			<artifactId>guice-assistedinject</artifactId>
			<version>${guice.version}</version>
		</dependency>

		<!-- Server and shared details -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>tvguide-shared</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>tvguide-server</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- CellTable Tools -->
		<dependency>
			<groupId>com.colinalworth</groupId>
			<artifactId>celltable-tools</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<!-- Bean Validation for GWT's Request Factory -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>org.apache.bval</groupId>
			<artifactId>bval-jsr303</artifactId>
			<version>0.2-incubating</version>
			<scope>runtime</scope>
		</dependency>
		<!-- Transfer Format for GWT's Request Factory -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20090211</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<!-- GWT Maven Plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<!-- <goal>test</goal> <goal>i18n</goal> <goal>generateAsync</goal> -->
						</goals>
					</execution>
				</executions>
				<!-- Plugin configuration. There are many available options, see gwt-maven-plugin 
					documentation at codehaus.org -->
				<configuration>
					<runTarget>tvguide.html</runTarget>
					<!--<hostedWebapp>${webappDirectory}</hostedWebapp> -->
					<!-- i18nMessagesBundle>com.acme.gwt.client.Messages</i18nMessagesBundle -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.5</version>
				<dependencies>
					<!-- RequestFactory Validation tests need access to this -->
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-dev</artifactId>
						<version>${gwt.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.5</version>
			</plugin>
		</plugins>
		<outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</outputDirectory>
	</build>
	<reporting>
		<plugins>
		<plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>gwt-maven-plugin</artifactId>
			<reportSets>
				<reportSet>
					<reports>
						<report>compile-report</report>
					</reports>
				</reportSet>
			</reportSets>
			</plugin>
		</plugins>
	</reporting>
</project>